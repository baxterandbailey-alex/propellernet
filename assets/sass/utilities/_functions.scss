// Use variable colours in SVG data URIs
@function url-friendly-color($color) {
    @return '%23' + str-slice('#{$color}', 2, -1);
}

// Convert PX to REM
@function px-rem($px) {
    @return (math.div($px, 16)) * 1rem;
}

//
//  Function to create an optimized svg url
//
@function svg-url($svg) {
    //
    //  Add missing namespace
    //
    @if not str-index($svg, xmlns) {
        $svg: str-replace($svg, '<svg', '<svg xmlns="http://www.w3.org/2000/svg"');
    }

    //
    //  Chunk up string in order to avoid
    //  "stack level too deep" error
    //
    $encoded: 'charset=utf8,';
    $slice: 2000;
    $index: 0;
    $loops: ceil(math.div(str-length($svg), $slice));

    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);
        //
        //   Encode
        //
        $chunk: str-replace($chunk, '"', "'");
        $chunk: str-replace($chunk, '%', '%25');
        $chunk: str-replace($chunk, '&', '%26');
        $chunk: str-replace($chunk, '#', '%23');
        $chunk: str-replace($chunk, '{', '%7B');
        $chunk: str-replace($chunk, '}', '%7D');
        $chunk: str-replace($chunk, '<', '%3C');
        $chunk: str-replace($chunk, '>', '%3E');

        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }

    @return url('data:image/svg+xml;#{$encoded}');
}

//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @return if(
        $index,
        str-slice($string, 1, $index - 1) + $replace +
            str-replace(str-slice($string, $index + str-length($search)), $search, $replace),
        $string
    );
}
